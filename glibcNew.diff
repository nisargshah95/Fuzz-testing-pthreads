diff --git a/nptl/pthread_cond_broadcast.c b/nptl/pthread_cond_broadcast.c
index e9846328d9..8a33c75d10 100644
--- a/nptl/pthread_cond_broadcast.c
+++ b/nptl/pthread_cond_broadcast.c
@@ -24,7 +24,7 @@
 #include <pthreadP.h>
 #include <stap-probe.h>
 #include <atomic.h>
-
+#include <yield.h>
 #include <shlib-compat.h>
 
 #include "pthread_cond_common.c"
@@ -38,6 +38,8 @@
 int
 __pthread_cond_broadcast (pthread_cond_t *cond)
 {
+  yield();
+
   LIBC_PROBE (cond_broadcast, 1, cond);
 
   unsigned int wrefs = atomic_load_relaxed (&cond->__data.__wrefs);
diff --git a/nptl/pthread_cond_destroy.c b/nptl/pthread_cond_destroy.c
index 46807c3516..69f1548f64 100644
--- a/nptl/pthread_cond_destroy.c
+++ b/nptl/pthread_cond_destroy.c
@@ -24,7 +24,7 @@
 #include <futex-internal.h>
 
 #include "pthread_cond_common.c"
-
+#include <yield.h>
 /* See __pthread_cond_wait for a high-level description of the algorithm.
 
    A correct program must make sure that no waiters are blocked on the condvar
@@ -41,6 +41,7 @@
 int
 __pthread_cond_destroy (pthread_cond_t *cond)
 {
+  yield();
   LIBC_PROBE (cond_destroy, 1, cond);
 
   /* Set the wake request flag.  We could also spin, but destruction that is
diff --git a/nptl/pthread_cond_init.c b/nptl/pthread_cond_init.c
index 1652b360a5..7992520b0a 100644
--- a/nptl/pthread_cond_init.c
+++ b/nptl/pthread_cond_init.c
@@ -20,12 +20,13 @@
 #include "pthreadP.h"
 #include <stap-probe.h>
 #include <string.h>
-
+#include <yield.h>
 
 /* See __pthread_cond_wait for details.  */
 int
 __pthread_cond_init (pthread_cond_t *cond, const pthread_condattr_t *cond_attr)
 {
+  yield();
   ASSERT_TYPE_SIZE (pthread_cond_t, __SIZEOF_PTHREAD_COND_T);
 
   struct pthread_condattr *icond_attr = (struct pthread_condattr *) cond_attr;
diff --git a/nptl/pthread_cond_signal.c b/nptl/pthread_cond_signal.c
index ea416a0e2c..fe1d6442f1 100644
--- a/nptl/pthread_cond_signal.c
+++ b/nptl/pthread_cond_signal.c
@@ -27,6 +27,7 @@
 
 #include <shlib-compat.h>
 #include <stap-probe.h>
+#include <yield.h>
 
 #include "pthread_cond_common.c"
 
@@ -34,6 +35,8 @@
 int
 __pthread_cond_signal (pthread_cond_t *cond)
 {
+
+  yield();	
   LIBC_PROBE (cond_signal, 1, cond);
 
   /* First check whether there are waiters.  Relaxed MO is fine for that for
diff --git a/nptl/pthread_cond_wait.c b/nptl/pthread_cond_wait.c
index cf372bc017..92d6315491 100644
--- a/nptl/pthread_cond_wait.c
+++ b/nptl/pthread_cond_wait.c
@@ -30,7 +30,7 @@
 #include <shlib-compat.h>
 #include <stap-probe.h>
 #include <time.h>
-
+#include <yield.h>
 #include "pthread_cond_common.c"
 
 
@@ -635,6 +635,7 @@ int
 __pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mutex)
 {
   /* clockid is unused when abstime is NULL. */
+  yield();
   return __pthread_cond_wait_common (cond, mutex, 0, NULL);
 }
 
diff --git a/nptl/pthread_create.c b/nptl/pthread_create.c
index 5682c9c2c0..2bf80596f6 100644
--- a/nptl/pthread_create.c
+++ b/nptl/pthread_create.c
@@ -20,8 +20,11 @@
 #include <errno.h>
 #include <stdbool.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <time.h>
 #include <string.h>
 #include <stdint.h>
+#include <limits.h>
 #include "pthreadP.h"
 #include <hp-timing.h>
 #include <ldsodefs.h>
@@ -619,13 +622,77 @@ report_thread_creation (struct pthread *pd)
 }
 
 
+int __custom_scheduling (pthread_attr_t *attr)
+{
+  int pthread_ret = 0;
+  unsigned cycles_high, cycles_low;
+
+  asm volatile ("RDTSCP\n\t"
+    "mov %%edx, %0\n\t"
+    "mov %%eax, %1\n\t"
+    "CPUID\n\t": "=r" (cycles_high), "=r" (cycles_low)::
+    "%rax", "%rbx", "%rcx", "%rdx");
+  // configure priority (default: static value 90)
+  srandom((int)(cycles_low % INT_MAX));
+  const char *rand_prio = getenv("RAND_PRIO");
+  int prio = (rand_prio != NULL && atoi(rand_prio) == 1)? random()%100: 90;
+  const struct sched_param param = { prio };
+
+  // configure sched policy (default: SCHED_FIFO)
+  const char *sched_policy_str = getenv("SCHED_POLICY");
+  int sched_policy = (sched_policy_str == NULL)? SCHED_FIFO: atoi(sched_policy_str);
+
+  cpu_set_t cpuset;
+  CPU_ZERO(&cpuset);
+  CPU_SET(0, &cpuset);
+
+  if ((pthread_ret = pthread_attr_init(attr)) != 0)
+  {
+    printf("Error calling pthread_attr_init: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedpolicy(attr, sched_policy)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedpolicy: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedparam(attr, &param)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedparam: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED)) != 0)
+  {
+    printf("Error calling pthread_attr_setinheritsched: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setaffinity_np(attr, sizeof(cpu_set_t), &cpuset)) != 0)
+  {
+    printf("Error calling pthread_attr_setaffinity_np: %s\n", strerror(pthread_ret));
+  }
+  return pthread_ret;
+}
+
 int
 __pthread_create_2_1 (pthread_t *newthread, const pthread_attr_t *attr,
 		      void *(*start_routine) (void *), void *arg)
 {
   STACK_VARIABLES;
 
-  const struct pthread_attr *iattr = (struct pthread_attr *) attr;
+  pthread_attr_t inject_attr;
+
+  const char *enable_custom_sched = getenv("CUSTOM_SCHED");
+  int custom_sched_success = 0;
+  if (enable_custom_sched != NULL && strncmp(enable_custom_sched, "1", 1) == 0)
+  {
+    if (__custom_scheduling(&inject_attr) != 0)
+    {
+      printf("Error assigning random priority to thread\n");
+    }
+    else
+    {
+      custom_sched_success = 1;
+    }
+  }
+  const struct pthread_attr *iattr = custom_sched_success?
+    (struct pthread_attr *) &inject_attr: (struct pthread_attr *) attr;
+
   struct pthread_attr default_attr;
   bool free_cpuset = false;
   bool c11 = (attr == ATTR_C11_THREAD);
diff --git a/nptl/pthread_mutex_lock.c b/nptl/pthread_mutex_lock.c
index 05bba50666..ce436221c0 100644
--- a/nptl/pthread_mutex_lock.c
+++ b/nptl/pthread_mutex_lock.c
@@ -26,6 +26,7 @@
 #include <atomic.h>
 #include <futex-internal.h>
 #include <stap-probe.h>
+#include <yield.h>
 
 #ifndef lll_lock_elision
 #define lll_lock_elision(lock, try_lock, private)	({ \
@@ -64,6 +65,9 @@ __pthread_mutex_lock (pthread_mutex_t *mutex)
 {
   /* See concurrency notes regarding mutex type which is loaded from __kind
      in struct __pthread_mutex_s in sysdeps/nptl/bits/thread-shared-types.h.  */
+
+  yield();
+
   unsigned int type = PTHREAD_MUTEX_TYPE_ELISION (mutex);
 
   LIBC_PROBE (mutex_entry, 1, mutex);
diff --git a/nptl/pthread_mutex_unlock.c b/nptl/pthread_mutex_unlock.c
index 53f8b868e4..898505dec7 100644
--- a/nptl/pthread_mutex_unlock.c
+++ b/nptl/pthread_mutex_unlock.c
@@ -23,6 +23,7 @@
 #include <lowlevellock.h>
 #include <stap-probe.h>
 #include <futex-internal.h>
+#include <yield.h>
 
 #ifndef lll_unlock_elision
 #define lll_unlock_elision(a,b,c) ({ lll_unlock (a,c); 0; })
@@ -38,6 +39,9 @@ __pthread_mutex_unlock_usercnt (pthread_mutex_t *mutex, int decr)
 {
   /* See concurrency notes regarding mutex type which is loaded from __kind
      in struct __pthread_mutex_s in sysdeps/nptl/bits/thread-shared-types.h.  */
+
+  yield();
+
   int type = PTHREAD_MUTEX_TYPE_ELISION (mutex);
   if (__builtin_expect (type
 			& ~(PTHREAD_MUTEX_KIND_MASK_NP
diff --git a/nptl/yield.h b/nptl/yield.h
new file mode 100644
index 0000000000..e3b2c684e8
--- /dev/null
+++ b/nptl/yield.h
@@ -0,0 +1,16 @@
+#include<time.h>
+
+static inline void yield(void){
+
+const char* start_yield = getenv("RAND_YIELD");
+
+if(start_yield != NULL && strncmp(start_yield, "1", 1)==0)
+  {
+   if(random()%2 ==0)
+   {
+	int i;
+	for(i=0; i<100; i++)
+	   pthread_yield();
+   }
+  }
+}
