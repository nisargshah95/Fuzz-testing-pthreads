diff --git a/nptl/pthread_create.c b/nptl/pthread_create.c
index 5682c9c2c0..e2f3c7cb30 100644
--- a/nptl/pthread_create.c
+++ b/nptl/pthread_create.c
@@ -20,6 +20,8 @@
 #include <errno.h>
 #include <stdbool.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <time.h>
 #include <string.h>
 #include <stdint.h>
 #include "pthreadP.h"
@@ -619,13 +621,71 @@ report_thread_creation (struct pthread *pd)
 }
 
 
+int __custom_scheduling (pthread_attr_t *attr)
+{
+  int pthread_ret = 0;
+
+  // configure priority (default: static value 90)
+  srandom(time(NULL));
+  const char *rand_prio = getenv("RAND_PRIO");
+  int prio = (rand_prio != NULL && atoi(rand_prio) == 1)? random()%100: 90;
+  const struct sched_param param = { prio };
+
+  // configure sched policy (default: SCHED_FIFO)
+  const char *sched_policy_str = getenv("SCHED_POLICY");
+  int sched_policy = (sched_policy_str == NULL)? SCHED_FIFO: atoi(sched_policy_str);
+
+  cpu_set_t cpuset;
+  CPU_ZERO(&cpuset);
+  CPU_SET(0, &cpuset);
+
+  if ((pthread_ret = pthread_attr_init(attr)) != 0)
+  {
+    printf("Error calling pthread_attr_init: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedpolicy(attr, sched_policy)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedpolicy: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedparam(attr, &param)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedparam: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED)) != 0)
+  {
+    printf("Error calling pthread_attr_setinheritsched: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setaffinity_np(attr, sizeof(cpu_set_t), &cpuset)) != 0)
+  {
+    printf("Error calling pthread_attr_setaffinity_np: %s\n", strerror(pthread_ret));
+  }
+  return pthread_ret;
+}
+
 int
 __pthread_create_2_1 (pthread_t *newthread, const pthread_attr_t *attr,
 		      void *(*start_routine) (void *), void *arg)
 {
   STACK_VARIABLES;
 
-  const struct pthread_attr *iattr = (struct pthread_attr *) attr;
+  pthread_attr_t inject_attr;
+
+  const char *enable_custom_sched = getenv("CUSTOM_SCHED");
+  int custom_sched_success = 0;
+  if (enable_custom_sched != NULL && strncmp(enable_custom_sched, "1", 1) == 0)
+  {
+    if (__custom_scheduling(&inject_attr) != 0)
+    {
+      printf("Error assigning random priority to thread\n");
+    }
+    else
+    {
+      custom_sched_success = 1;
+    }
+  }
+  const struct pthread_attr *iattr = custom_sched_success?
+    (struct pthread_attr *) &inject_attr: (struct pthread_attr *) attr;
+
   struct pthread_attr default_attr;
   bool free_cpuset = false;
   bool c11 = (attr == ATTR_C11_THREAD);
diff --git a/nptl/pthread_mutex_lock.c b/nptl/pthread_mutex_lock.c
index 05bba50666..4cc8a6e9df 100644
--- a/nptl/pthread_mutex_lock.c
+++ b/nptl/pthread_mutex_lock.c
@@ -26,6 +26,10 @@
 #include <atomic.h>
 #include <futex-internal.h>
 #include <stap-probe.h>
+#include <string.h>
+#include <stdio.h>
+#include <time.h>
+
 
 #ifndef lll_lock_elision
 #define lll_lock_elision(lock, try_lock, private)	({ \
@@ -64,6 +68,82 @@ __pthread_mutex_lock (pthread_mutex_t *mutex)
 {
   /* See concurrency notes regarding mutex type which is loaded from __kind
      in struct __pthread_mutex_s in sysdeps/nptl/bits/thread-shared-types.h.  */
+  int pthread_ret = 0;
+  
+  bool dbg = false;
+  const char *dbgS = getenv("DBG");
+  if(dbgS != NULL && strncmp(dbgS, "1", 1)==0)
+    dbg = true;
+
+  const char *start_yield = getenv("RAND_YIELD");
+  if(start_yield != NULL && strncmp(start_yield, "1", 1)==0)
+  {
+   if(random()%2 ==0)
+   { 
+      struct sched_param originalParam;
+      int originalPolicy;
+      if((pthread_ret = pthread_getschedparam(pthread_self(), &originalPolicy, &originalParam)) !=0 )
+      {
+        printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy original yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+      
+      const struct sched_param param = {0};
+      if((pthread_ret = pthread_setschedparam(pthread_self(), SCHED_OTHER, &param)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+    
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy while yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }    
+
+      pthread_yield();
+     
+      if((pthread_ret = pthread_setschedparam(pthread_self(), originalPolicy, &originalParam)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy after yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+    } 
+  }
+	      
   unsigned int type = PTHREAD_MUTEX_TYPE_ELISION (mutex);
 
   LIBC_PROBE (mutex_entry, 1, mutex);
@@ -163,6 +243,74 @@ __pthread_mutex_lock (pthread_mutex_t *mutex)
 
   LIBC_PROBE (mutex_acquired, 1, mutex);
 
+  if(start_yield != NULL && strncmp(start_yield, "1", 1)==0)
+  {
+   if(random()%2 ==0)
+   { 
+      struct sched_param originalParam;
+      int originalPolicy;
+      if((pthread_ret = pthread_getschedparam(pthread_self(), &originalPolicy, &originalParam)) !=0 )
+      {
+        printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy original yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+      
+      const struct sched_param param = {0};
+      if((pthread_ret = pthread_setschedparam(pthread_self(), SCHED_OTHER, &param)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+    
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy while yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }    
+
+      pthread_yield();
+     
+      if((pthread_ret = pthread_setschedparam(pthread_self(), originalPolicy, &originalParam)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy after yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+    } 
+  }
+
   return 0;
 }
 
diff --git a/nptl/pthread_mutex_unlock.c b/nptl/pthread_mutex_unlock.c
index 53f8b868e4..454a52aab6 100644
--- a/nptl/pthread_mutex_unlock.c
+++ b/nptl/pthread_mutex_unlock.c
@@ -23,6 +23,9 @@
 #include <lowlevellock.h>
 #include <stap-probe.h>
 #include <futex-internal.h>
+#include <string.h>
+#include <stdio.h>
+#include <time.h>
 
 #ifndef lll_unlock_elision
 #define lll_unlock_elision(a,b,c) ({ lll_unlock (a,c); 0; })
@@ -354,7 +357,153 @@ __pthread_mutex_unlock_full (pthread_mutex_t *mutex, int decr)
 int
 __pthread_mutex_unlock (pthread_mutex_t *mutex)
 {
+  int pthread_ret = 0;
+  
+  bool dbg = false;
+  const char *dbgS = getenv("DBG");
+  if(dbgS != NULL && strncmp(dbgS, "1", 1)==0)
+    dbg = true;
+
+  const char *start_yield = getenv("RAND_YIELD");
+  if(start_yield != NULL && strncmp(start_yield, "1", 1)==0)
+  {
+   if(random()%2 ==0)
+   { 
+      struct sched_param originalParam;
+      int originalPolicy;
+      if((pthread_ret = pthread_getschedparam(pthread_self(), &originalPolicy, &originalParam)) !=0 )
+      {
+        printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy original yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+      
+      const struct sched_param param = {0};
+      if((pthread_ret = pthread_setschedparam(pthread_self(), SCHED_OTHER, &param)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+    
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy while yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }    
+
+      pthread_yield();
+     
+      if((pthread_ret = pthread_setschedparam(pthread_self(), originalPolicy, &originalParam)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy after yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+    } 
+  }
+
   return __pthread_mutex_unlock_usercnt (mutex, 1);
+
+  if(start_yield != NULL && strncmp(start_yield, "1", 1)==0)
+  {
+   if(random()%2 ==0)
+   { 
+      struct sched_param originalParam;
+      int originalPolicy;
+      if((pthread_ret = pthread_getschedparam(pthread_self(), &originalPolicy, &originalParam)) !=0 )
+      {
+        printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy original yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+      
+      const struct sched_param param = {0};
+      if((pthread_ret = pthread_setschedparam(pthread_self(), SCHED_OTHER, &param)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+    
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy while yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }    
+
+      pthread_yield();
+     
+      if((pthread_ret = pthread_setschedparam(pthread_self(), originalPolicy, &originalParam)) != 0)
+      {
+        printf("Error calling pthread_setschedparam: %s\n", strerror(pthread_ret));
+      }
+
+      if(dbg)
+      {
+        struct sched_param tempParam;
+        int tempPolicy;
+        if((pthread_ret = pthread_getschedparam(pthread_self(), &tempPolicy, &tempParam)) !=0 )
+        {
+          printf("Error calling pthread_getschedparam: %s\n", strerror(pthread_ret));
+        }
+	else
+	{
+	  printf("Priority and policy after yielding: %d and %d\n", tempParam.sched_priority, tempPolicy);
+	}
+      }
+    } 
+  }
+
+
 }
 weak_alias (__pthread_mutex_unlock, pthread_mutex_unlock)
 hidden_def (__pthread_mutex_unlock)
