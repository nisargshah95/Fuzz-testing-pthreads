diff --git a/nptl/pthread_create.c b/nptl/pthread_create.c
index 5682c9c2c0..691591dac6 100644
--- a/nptl/pthread_create.c
+++ b/nptl/pthread_create.c
@@ -20,6 +20,8 @@
 #include <errno.h>
 #include <stdbool.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <time.h>
 #include <string.h>
 #include <stdint.h>
 #include "pthreadP.h"
@@ -625,7 +627,35 @@ __pthread_create_2_1 (pthread_t *newthread, const pthread_attr_t *attr,
 {
   STACK_VARIABLES;
 
-  const struct pthread_attr *iattr = (struct pthread_attr *) attr;
+  pthread_attr_t injectattr;
+
+  int pthread_ret = pthread_attr_init(&injectattr);
+  if (pthread_ret != 0)
+  {
+    printf("Error calling pthread_attr_init: %s\n", strerror(pthread_ret));
+  }
+  pthread_ret = pthread_attr_setschedpolicy(&injectattr, SCHED_RR);
+  if (pthread_ret != 0)
+  {
+    printf("Error calling pthread_attr_setschedpolicy: %s\n", strerror(pthread_ret));
+  }
+
+  srandom(time(NULL));
+  int rand_prio = random() % 100;
+  const struct sched_param injectparam = { rand_prio };
+  pthread_ret = pthread_attr_setschedparam(&injectattr, &injectparam);
+  if (pthread_ret != 0)
+  {
+    printf("Error calling pthread_attr_setschedparam: %s\n", strerror(pthread_ret));
+  }
+  pthread_ret = pthread_attr_setinheritsched(&injectattr, PTHREAD_EXPLICIT_SCHED);
+  if (pthread_ret != 0)
+  {
+    printf("Error calling pthread_attr_setinheritsched: %s\n", strerror(pthread_ret));
+  }
+
+  // const struct pthread_attr *iattr = (struct pthread_attr *) attr;
+  const struct pthread_attr *iattr = (struct pthread_attr *) &injectattr;
   struct pthread_attr default_attr;
   bool free_cpuset = false;
   bool c11 = (attr == ATTR_C11_THREAD);
