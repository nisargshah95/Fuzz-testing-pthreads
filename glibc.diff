diff --git a/nptl/pthread_create.c b/nptl/pthread_create.c
index 5682c9c2c0..f29dfad4c8 100644
--- a/nptl/pthread_create.c
+++ b/nptl/pthread_create.c
@@ -20,6 +20,8 @@
 #include <errno.h>
 #include <stdbool.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <time.h>
 #include <string.h>
 #include <stdint.h>
 #include "pthreadP.h"
@@ -619,13 +621,55 @@ report_thread_creation (struct pthread *pd)
 }
 
 
+int __assign_random_priority (pthread_attr_t *attr)
+{
+  int pthread_ret = 0;
+  srandom(time(NULL));
+  int rand_prio = random() % 100;
+  const struct sched_param param = { rand_prio };
+  if ((pthread_ret = pthread_attr_init(attr)) != 0)
+  {
+    printf("Error calling pthread_attr_init: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedpolicy(attr, SCHED_RR)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedpolicy: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setschedparam(attr, &param)) != 0)
+  {
+    printf("Error calling pthread_attr_setschedparam: %s\n", strerror(pthread_ret));
+  }
+  else if ((pthread_ret = pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED)) != 0)
+  {
+    printf("Error calling pthread_attr_setinheritsched: %s\n", strerror(pthread_ret));
+  }
+  return pthread_ret;
+}
+
 int
 __pthread_create_2_1 (pthread_t *newthread, const pthread_attr_t *attr,
 		      void *(*start_routine) (void *), void *arg)
 {
   STACK_VARIABLES;
 
-  const struct pthread_attr *iattr = (struct pthread_attr *) attr;
+  pthread_attr_t inject_attr;
+
+  const char *enable_rand_prio = getenv("PTH_RAND_PRIO");
+  int rand_prio_success = 0;
+  if (enable_rand_prio != NULL && strncmp(enable_rand_prio, "1", 1) == 0)
+  {
+    if (__assign_random_priority(&inject_attr) != 0)
+    {
+      printf("Error assigning random priority to thread\n");
+    }
+    else
+    {
+      rand_prio_success = 1;
+    }
+  }
+  const struct pthread_attr *iattr = rand_prio_success?
+    (struct pthread_attr *) &inject_attr: (struct pthread_attr *) attr;
+
   struct pthread_attr default_attr;
   bool free_cpuset = false;
   bool c11 = (attr == ATTR_C11_THREAD);
